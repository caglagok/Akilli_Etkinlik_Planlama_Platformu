@{
    ViewData["Title"] = "Profile";
}

<header class="top-left-header">
    <a href="@Url.Action("UserHubArea", "User", new { Username = Model.UserName })" class="button back-to-home-button">Geri</a>
</header>
<div class="profile-container">
    <div class="profile-header">
        <img src="@(!string.IsNullOrEmpty(Model.ProfilFoto) ? Model.ProfilFoto : Url.Content("~/images/default-profile-pic.jpg"))"
             alt="Profil Fotoğrafı" class="profile-pic" />
        <h2 class="username">@Model.Ad @Model.Soyad</h2>
        <p class="location">@(!string.IsNullOrEmpty(Model.Konum) ? Model.Konum : "Konum bilgisi yok")</p>
    </div>

    <div class="details-container">
        <div class="info-section">
            <h3 class="section-title">Kişisel Bilgiler</h3>
            <p><strong>E-posta:</strong> @Model.Email</p>
         
            @if (Model.DogumTarihi != null)
            {
                <p><strong>Doğum Tarihi:</strong> @Model.DogumTarihi?.ToString("yyyy-MM-dd")</p>
            }
            else
            {
                <p><strong>Doğum Tarihi:</strong> Tarih bilgisi yok</p>
            }

            <p><strong>Cinsiyet:</strong> @(string.IsNullOrEmpty(Model.Cinsiyet) ? "Belirtilmemiş" : Model.Cinsiyet)</p>
            <p><strong>Telefon:</strong> @(!string.IsNullOrEmpty(Model.TelefonNumarasi) ? Model.TelefonNumarasi : "Telefon numarası yok")</p>
        </div>
    </div>

    <div class="profile-actions">
        <a href="@Url.Action("UpdateUser", "User")" class="button profile-update-button">Profili Güncelle</a>
    @*    <a href="@Url.Action("ForgotPassword", "Account")" class="button password-update-button">Şifre Yenile</a>*@
    </div> 
    <div id="map" style="width: 100%; height: 400px; border-radius: 12px; margin-bottom: 20px;"></div>
    <div class="nearby-events">
        <h3>Yakınlardaki Etkinlikler</h3>
        <ul>
            @foreach (var eventItem in Model.NearbyEvents)
            {
                <li>
                    <strong>@eventItem.EventName</strong><br />
                    @eventItem.Location<br />
                    @eventItem.Distance km uzaklıkta
                </li>
            }
        </ul>
    </div>
    @if (ViewBag.SuccessMessage != null)
    {
        <div class="alert alert-success">
            @ViewBag.SuccessMessage
        </div>
    }
    <div class="form-group mb-3">
        <label for="IlgiAlanlari" class="form-label">İlgi Alanları</label>
        <div>
            @if (Model.Kategoriler != null && Model.Kategoriler.Count > 0) // Kategoriler boş değilse
            {
                var selectedIlgiAlanlari = Model.IlgiAlanlari ?? new List<int>(); // Seçili ilgi alanlarını al
                foreach (var kategori in Model.Kategoriler)
                {
                    if (selectedIlgiAlanlari.Contains(int.Parse(kategori.Value))) // Sadece işaretli olanları kontrol et
                    {
                        <div class="form-check">
                            <input type="checkbox"
                                   class="form-check-input"
                                   id="kategori_@kategori.Value"
                                   name="IlgiAlanlari"
                                   value="@kategori.Value"
                                   checked="checked" // Checkbox işaretli olacak />
                            <label class="form-check-label" for="kategori_@kategori.Value">
                                @kategori.Text
                            </label>
                        </div>
                    }
                }
            }
            else
            {
                <p>Hiçbir ilgi alanı bulunmamaktadır.</p>
            }
        </div>
    </div>


</div>
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet" />

<script>
    mapboxgl.accessToken = 'pk.eyJ1Ijoic2VseWlsIiwiYSI6ImNsdjUyN2d1ZTBkY28yamxidXRxYm1tNnUifQ.Uqy4MfIj3drA__4mvRldfw';

    var userLocation = {
        Lat: @Html.Raw(Json.Serialize(Model.Lat)),
        Lng: @Html.Raw(Json.Serialize(Model.Lng))
    };



    document.addEventListener('DOMContentLoaded', function () {
        // Get user's location from the model
        var userLat = parseFloat(userLocation.Lat);
        var userLng = parseFloat(userLocation.Lng);

        console.log('Parsed Lat:', userLat, 'Parsed Lng:', userLng); // Debug log to check values

        // Check for valid coordinates
        if (!isNaN(userLat) && !isNaN(userLng) && userLat !== 0 && userLng !== 0) {
            var map = new mapboxgl.Map({
                container: 'map',
                style: 'mapbox://styles/mapbox/streets-v11',
                center: [userLng, userLat],
                zoom: 12
            });

            new mapboxgl.Marker()
                .setLngLat([userLng, userLat])
                .setPopup(new mapboxgl.Popup().setText('Kullanıcının Konumu'))
                .addTo(map);

            // Update the location message
            document.getElementById('location-message').textContent = 'Konum bilgisi mevcut.';
        } else {
            console.error('Geçerli bir konum bilgisi yok: Lat ve Lng sıfır veya NaN.');

            // Update the location message for invalid coordinates
            document.getElementById('location-message').textContent = 'Geçerli bir konum bilgisi yok.';
        }
    });
</script>

<style>
    #map {
        width: 100%;
        height: 400px;
        border-radius: 12px;
        margin-bottom: 20px;
    }
    .profile-container {
        margin: 20px auto;
        max-width: 800px;
        background-color: #fff;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .profile-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .profile-pic {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
    }

    .username {
        font-size: 24px;
        font-weight: bold;
    }

    .location {
        font-size: 16px;
        color: #777;
    }

    .details-container {
        margin-top: 20px;
    }

    .info-section {
        margin-bottom: 20px;
    }

    .section-title {
        font-size: 20px;
        font-weight: bold;
        margin-bottom: 10px;
        border-bottom: 1px solid #ddd;
    }

    .profile-actions {
        position: absolute;
        top: 80px;
        right: 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .info-section ul {
        list-style-type: disc;
        margin-left: 20px;
    }

    .info-section li {
        margin-bottom: 5px;
    }

    .button {
        padding: 10px 15px;
        background-color: #007bff;
        color: #fff;
        border: none;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        transition: background-color 0.3s;
    }

        .button:hover {
            background-color: #0056b3;
        }

    .logout-button {
        background-color: #e63946;
    }

        .logout-button:hover {
            background-color: #d62828;
        }
</style>

